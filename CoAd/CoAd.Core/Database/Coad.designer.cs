#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoAd.Core.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="coad_test")]
	public partial class CoadDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTypeParam(TypeParam instance);
    partial void UpdateTypeParam(TypeParam instance);
    partial void DeleteTypeParam(TypeParam instance);
    partial void InsertDeviceGroupParam(DeviceGroupParam instance);
    partial void UpdateDeviceGroupParam(DeviceGroupParam instance);
    partial void DeleteDeviceGroupParam(DeviceGroupParam instance);
    partial void InsertClientStore(ClientStore instance);
    partial void UpdateClientStore(ClientStore instance);
    partial void DeleteClientStore(ClientStore instance);
    partial void InsertClientServer(ClientServer instance);
    partial void UpdateClientServer(ClientServer instance);
    partial void DeleteClientServer(ClientServer instance);
    partial void InsertDeviceGroupDependency(DeviceGroupDependency instance);
    partial void UpdateDeviceGroupDependency(DeviceGroupDependency instance);
    partial void DeleteDeviceGroupDependency(DeviceGroupDependency instance);
    partial void InsertDeviceParam(DeviceParam instance);
    partial void UpdateDeviceParam(DeviceParam instance);
    partial void DeleteDeviceParam(DeviceParam instance);
    partial void InsertDeviceEvent(DeviceEvent instance);
    partial void UpdateDeviceEvent(DeviceEvent instance);
    partial void DeleteDeviceEvent(DeviceEvent instance);
    partial void InsertClientDevice(ClientDevice instance);
    partial void UpdateClientDevice(ClientDevice instance);
    partial void DeleteClientDevice(ClientDevice instance);
    partial void InsertClientDeviceGroup(ClientDeviceGroup instance);
    partial void UpdateClientDeviceGroup(ClientDeviceGroup instance);
    partial void DeleteClientDeviceGroup(ClientDeviceGroup instance);
    #endregion
		
		public CoadDataContext() : 
				base(global::CoAd.Core.Properties.Settings.Default.coad_testConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CoadDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoadDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoadDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoadDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TypeParam> TypeParams
		{
			get
			{
				return this.GetTable<TypeParam>();
			}
		}
		
		public System.Data.Linq.Table<DeviceGroupParam> DeviceGroupParams
		{
			get
			{
				return this.GetTable<DeviceGroupParam>();
			}
		}
		
		public System.Data.Linq.Table<ClientStore> ClientStores
		{
			get
			{
				return this.GetTable<ClientStore>();
			}
		}
		
		public System.Data.Linq.Table<ClientServer> ClientServers
		{
			get
			{
				return this.GetTable<ClientServer>();
			}
		}
		
		public System.Data.Linq.Table<DeviceGroupDependency> DeviceGroupDependencies
		{
			get
			{
				return this.GetTable<DeviceGroupDependency>();
			}
		}
		
		public System.Data.Linq.Table<DeviceParam> DeviceParams
		{
			get
			{
				return this.GetTable<DeviceParam>();
			}
		}
		
		public System.Data.Linq.Table<DeviceEvent> DeviceEvents
		{
			get
			{
				return this.GetTable<DeviceEvent>();
			}
		}
		
		public System.Data.Linq.Table<ClientDevice> ClientDevices
		{
			get
			{
				return this.GetTable<ClientDevice>();
			}
		}
		
		public System.Data.Linq.Table<ClientDeviceGroup> ClientDeviceGroups
		{
			get
			{
				return this.GetTable<ClientDeviceGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeParams")]
	public partial class TypeParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_type;
		
		private string _name;
		
		private string _mnem_param;
		
		private int _object_str_param;
		
		private string _description;
		
		private int _type_param;
		
		private int _unused;
		
		private System.Nullable<int> _object_param;
		
		private EntitySet<DeviceGroupParam> _DeviceGroupParams;
		
		private EntitySet<DeviceParam> _DeviceParams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_typeChanging(int value);
    partial void Onid_typeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onmnem_paramChanging(string value);
    partial void Onmnem_paramChanged();
    partial void Onobject_str_paramChanging(int value);
    partial void Onobject_str_paramChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void Ontype_paramChanging(int value);
    partial void Ontype_paramChanged();
    partial void OnunusedChanging(int value);
    partial void OnunusedChanged();
    partial void Onobject_paramChanging(System.Nullable<int> value);
    partial void Onobject_paramChanged();
    #endregion
		
		public TypeParam()
		{
			this._DeviceGroupParams = new EntitySet<DeviceGroupParam>(new Action<DeviceGroupParam>(this.attach_DeviceGroupParams), new Action<DeviceGroupParam>(this.detach_DeviceGroupParams));
			this._DeviceParams = new EntitySet<DeviceParam>(new Action<DeviceParam>(this.attach_DeviceParams), new Action<DeviceParam>(this.detach_DeviceParams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_type", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_type
		{
			get
			{
				return this._id_type;
			}
			set
			{
				if ((this._id_type != value))
				{
					this.Onid_typeChanging(value);
					this.SendPropertyChanging();
					this._id_type = value;
					this.SendPropertyChanged("id_type");
					this.Onid_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mnem_param", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string mnem_param
		{
			get
			{
				return this._mnem_param;
			}
			set
			{
				if ((this._mnem_param != value))
				{
					this.Onmnem_paramChanging(value);
					this.SendPropertyChanging();
					this._mnem_param = value;
					this.SendPropertyChanged("mnem_param");
					this.Onmnem_paramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_object_str_param", DbType="Int NOT NULL")]
		public int object_str_param
		{
			get
			{
				return this._object_str_param;
			}
			set
			{
				if ((this._object_str_param != value))
				{
					this.Onobject_str_paramChanging(value);
					this.SendPropertyChanging();
					this._object_str_param = value;
					this.SendPropertyChanged("object_str_param");
					this.Onobject_str_paramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_param", DbType="Int NOT NULL")]
		public int type_param
		{
			get
			{
				return this._type_param;
			}
			set
			{
				if ((this._type_param != value))
				{
					this.Ontype_paramChanging(value);
					this.SendPropertyChanging();
					this._type_param = value;
					this.SendPropertyChanged("type_param");
					this.Ontype_paramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unused", DbType="Int NOT NULL")]
		public int unused
		{
			get
			{
				return this._unused;
			}
			set
			{
				if ((this._unused != value))
				{
					this.OnunusedChanging(value);
					this.SendPropertyChanging();
					this._unused = value;
					this.SendPropertyChanged("unused");
					this.OnunusedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_object_param", DbType="Int")]
		public System.Nullable<int> object_param
		{
			get
			{
				return this._object_param;
			}
			set
			{
				if ((this._object_param != value))
				{
					this.Onobject_paramChanging(value);
					this.SendPropertyChanging();
					this._object_param = value;
					this.SendPropertyChanged("object_param");
					this.Onobject_paramChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeParam_DeviceGroupParam", Storage="_DeviceGroupParams", ThisKey="id_type", OtherKey="id_type")]
		public EntitySet<DeviceGroupParam> DeviceGroupParams
		{
			get
			{
				return this._DeviceGroupParams;
			}
			set
			{
				this._DeviceGroupParams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeParam_DeviceParam", Storage="_DeviceParams", ThisKey="id_type", OtherKey="id_type")]
		public EntitySet<DeviceParam> DeviceParams
		{
			get
			{
				return this._DeviceParams;
			}
			set
			{
				this._DeviceParams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceGroupParams(DeviceGroupParam entity)
		{
			this.SendPropertyChanging();
			entity.TypeParam = this;
		}
		
		private void detach_DeviceGroupParams(DeviceGroupParam entity)
		{
			this.SendPropertyChanging();
			entity.TypeParam = null;
		}
		
		private void attach_DeviceParams(DeviceParam entity)
		{
			this.SendPropertyChanging();
			entity.TypeParam = this;
		}
		
		private void detach_DeviceParams(DeviceParam entity)
		{
			this.SendPropertyChanging();
			entity.TypeParam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceGroupParams")]
	public partial class DeviceGroupParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_type;
		
		private int _id_group;
		
		private string _value;
		
		private int _state;
		
		private System.Nullable<System.DateTime> _dateOfChange;
		
		private EntityRef<TypeParam> _TypeParam;
		
		private EntityRef<ClientDeviceGroup> _ClientDeviceGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_typeChanging(int value);
    partial void Onid_typeChanged();
    partial void Onid_groupChanging(int value);
    partial void Onid_groupChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnstateChanging(int value);
    partial void OnstateChanged();
    partial void OndateOfChangeChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfChangeChanged();
    #endregion
		
		public DeviceGroupParam()
		{
			this._TypeParam = default(EntityRef<TypeParam>);
			this._ClientDeviceGroup = default(EntityRef<ClientDeviceGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_type", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_type
		{
			get
			{
				return this._id_type;
			}
			set
			{
				if ((this._id_type != value))
				{
					if (this._TypeParam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_typeChanging(value);
					this.SendPropertyChanging();
					this._id_type = value;
					this.SendPropertyChanged("id_type");
					this.Onid_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_group", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_group
		{
			get
			{
				return this._id_group;
			}
			set
			{
				if ((this._id_group != value))
				{
					if (this._ClientDeviceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_groupChanging(value);
					this.SendPropertyChanging();
					this._id_group = value;
					this.SendPropertyChanged("id_group");
					this.Onid_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="Int NOT NULL")]
		public int state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfChange", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateOfChange
		{
			get
			{
				return this._dateOfChange;
			}
			set
			{
				if ((this._dateOfChange != value))
				{
					this.OndateOfChangeChanging(value);
					this.SendPropertyChanging();
					this._dateOfChange = value;
					this.SendPropertyChanged("dateOfChange");
					this.OndateOfChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeParam_DeviceGroupParam", Storage="_TypeParam", ThisKey="id_type", OtherKey="id_type", IsForeignKey=true)]
		public TypeParam TypeParam
		{
			get
			{
				return this._TypeParam.Entity;
			}
			set
			{
				TypeParam previousValue = this._TypeParam.Entity;
				if (((previousValue != value) 
							|| (this._TypeParam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeParam.Entity = null;
						previousValue.DeviceGroupParams.Remove(this);
					}
					this._TypeParam.Entity = value;
					if ((value != null))
					{
						value.DeviceGroupParams.Add(this);
						this._id_type = value.id_type;
					}
					else
					{
						this._id_type = default(int);
					}
					this.SendPropertyChanged("TypeParam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDeviceGroup_DeviceGroupParam", Storage="_ClientDeviceGroup", ThisKey="id_group", OtherKey="id", IsForeignKey=true)]
		public ClientDeviceGroup ClientDeviceGroup
		{
			get
			{
				return this._ClientDeviceGroup.Entity;
			}
			set
			{
				ClientDeviceGroup previousValue = this._ClientDeviceGroup.Entity;
				if (((previousValue != value) 
							|| (this._ClientDeviceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientDeviceGroup.Entity = null;
						previousValue.DeviceGroupParams.Remove(this);
					}
					this._ClientDeviceGroup.Entity = value;
					if ((value != null))
					{
						value.DeviceGroupParams.Add(this);
						this._id_group = value.id;
					}
					else
					{
						this._id_group = default(int);
					}
					this.SendPropertyChanged("ClientDeviceGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientStores")]
	public partial class ClientStore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_server;
		
		private int _fo_id_store;
		
		private string _name;
		
		private string _egais_props;
		
		private string _ofd_props;
		
		private string _bpa_props;
		
		private int _state;
		
		private System.Nullable<System.DateTime> _dateOfChange;
		
		private EntityRef<ClientServer> _ClientServer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_serverChanging(int value);
    partial void Onid_serverChanged();
    partial void Onfo_id_storeChanging(int value);
    partial void Onfo_id_storeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onegais_propsChanging(string value);
    partial void Onegais_propsChanged();
    partial void Onofd_propsChanging(string value);
    partial void Onofd_propsChanged();
    partial void Onbpa_propsChanging(string value);
    partial void Onbpa_propsChanged();
    partial void OnstateChanging(int value);
    partial void OnstateChanged();
    partial void OndateOfChangeChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfChangeChanged();
    #endregion
		
		public ClientStore()
		{
			this._ClientServer = default(EntityRef<ClientServer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_server", DbType="Int NOT NULL")]
		public int id_server
		{
			get
			{
				return this._id_server;
			}
			set
			{
				if ((this._id_server != value))
				{
					if (this._ClientServer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_serverChanging(value);
					this.SendPropertyChanging();
					this._id_server = value;
					this.SendPropertyChanged("id_server");
					this.Onid_serverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fo_id_store", DbType="Int NOT NULL")]
		public int fo_id_store
		{
			get
			{
				return this._fo_id_store;
			}
			set
			{
				if ((this._fo_id_store != value))
				{
					this.Onfo_id_storeChanging(value);
					this.SendPropertyChanging();
					this._fo_id_store = value;
					this.SendPropertyChanged("fo_id_store");
					this.Onfo_id_storeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_egais_props", DbType="NVarChar(MAX)")]
		public string egais_props
		{
			get
			{
				return this._egais_props;
			}
			set
			{
				if ((this._egais_props != value))
				{
					this.Onegais_propsChanging(value);
					this.SendPropertyChanging();
					this._egais_props = value;
					this.SendPropertyChanged("egais_props");
					this.Onegais_propsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ofd_props", DbType="NVarChar(MAX)")]
		public string ofd_props
		{
			get
			{
				return this._ofd_props;
			}
			set
			{
				if ((this._ofd_props != value))
				{
					this.Onofd_propsChanging(value);
					this.SendPropertyChanging();
					this._ofd_props = value;
					this.SendPropertyChanged("ofd_props");
					this.Onofd_propsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bpa_props", DbType="NVarChar(MAX)")]
		public string bpa_props
		{
			get
			{
				return this._bpa_props;
			}
			set
			{
				if ((this._bpa_props != value))
				{
					this.Onbpa_propsChanging(value);
					this.SendPropertyChanging();
					this._bpa_props = value;
					this.SendPropertyChanged("bpa_props");
					this.Onbpa_propsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="Int NOT NULL")]
		public int state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfChange", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateOfChange
		{
			get
			{
				return this._dateOfChange;
			}
			set
			{
				if ((this._dateOfChange != value))
				{
					this.OndateOfChangeChanging(value);
					this.SendPropertyChanging();
					this._dateOfChange = value;
					this.SendPropertyChanged("dateOfChange");
					this.OndateOfChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientServer_ClientStore", Storage="_ClientServer", ThisKey="id_server", OtherKey="id", IsForeignKey=true)]
		public ClientServer ClientServer
		{
			get
			{
				return this._ClientServer.Entity;
			}
			set
			{
				ClientServer previousValue = this._ClientServer.Entity;
				if (((previousValue != value) 
							|| (this._ClientServer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientServer.Entity = null;
						previousValue.ClientStores.Remove(this);
					}
					this._ClientServer.Entity = value;
					if ((value != null))
					{
						value.ClientStores.Add(this);
						this._id_server = value.id;
					}
					else
					{
						this._id_server = default(int);
					}
					this.SendPropertyChanged("ClientServer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientServers")]
	public partial class ClientServer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _identifier;
		
		private string _name;
		
		private string _configuration;
		
		private System.Nullable<int> _status;
		
		private EntitySet<ClientStore> _ClientStores;
		
		private EntitySet<ClientDevice> _ClientDevices;
		
		private EntitySet<ClientDeviceGroup> _ClientDeviceGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidentifierChanging(string value);
    partial void OnidentifierChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnconfigurationChanging(string value);
    partial void OnconfigurationChanged();
    partial void OnstatusChanging(System.Nullable<int> value);
    partial void OnstatusChanged();
    #endregion
		
		public ClientServer()
		{
			this._ClientStores = new EntitySet<ClientStore>(new Action<ClientStore>(this.attach_ClientStores), new Action<ClientStore>(this.detach_ClientStores));
			this._ClientDevices = new EntitySet<ClientDevice>(new Action<ClientDevice>(this.attach_ClientDevices), new Action<ClientDevice>(this.detach_ClientDevices));
			this._ClientDeviceGroups = new EntitySet<ClientDeviceGroup>(new Action<ClientDeviceGroup>(this.attach_ClientDeviceGroups), new Action<ClientDeviceGroup>(this.detach_ClientDeviceGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_identifier", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string identifier
		{
			get
			{
				return this._identifier;
			}
			set
			{
				if ((this._identifier != value))
				{
					this.OnidentifierChanging(value);
					this.SendPropertyChanging();
					this._identifier = value;
					this.SendPropertyChanged("identifier");
					this.OnidentifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_configuration", DbType="NVarChar(MAX)")]
		public string configuration
		{
			get
			{
				return this._configuration;
			}
			set
			{
				if ((this._configuration != value))
				{
					this.OnconfigurationChanging(value);
					this.SendPropertyChanging();
					this._configuration = value;
					this.SendPropertyChanged("configuration");
					this.OnconfigurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int")]
		public System.Nullable<int> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientServer_ClientStore", Storage="_ClientStores", ThisKey="id", OtherKey="id_server")]
		public EntitySet<ClientStore> ClientStores
		{
			get
			{
				return this._ClientStores;
			}
			set
			{
				this._ClientStores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientServer_ClientDevice", Storage="_ClientDevices", ThisKey="id", OtherKey="id_server")]
		public EntitySet<ClientDevice> ClientDevices
		{
			get
			{
				return this._ClientDevices;
			}
			set
			{
				this._ClientDevices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientServer_ClientDeviceGroup", Storage="_ClientDeviceGroups", ThisKey="id", OtherKey="id_server")]
		public EntitySet<ClientDeviceGroup> ClientDeviceGroups
		{
			get
			{
				return this._ClientDeviceGroups;
			}
			set
			{
				this._ClientDeviceGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClientStores(ClientStore entity)
		{
			this.SendPropertyChanging();
			entity.ClientServer = this;
		}
		
		private void detach_ClientStores(ClientStore entity)
		{
			this.SendPropertyChanging();
			entity.ClientServer = null;
		}
		
		private void attach_ClientDevices(ClientDevice entity)
		{
			this.SendPropertyChanging();
			entity.ClientServer = this;
		}
		
		private void detach_ClientDevices(ClientDevice entity)
		{
			this.SendPropertyChanging();
			entity.ClientServer = null;
		}
		
		private void attach_ClientDeviceGroups(ClientDeviceGroup entity)
		{
			this.SendPropertyChanging();
			entity.ClientServer = this;
		}
		
		private void detach_ClientDeviceGroups(ClientDeviceGroup entity)
		{
			this.SendPropertyChanging();
			entity.ClientServer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceGroupDependency")]
	public partial class DeviceGroupDependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_primary_group;
		
		private int _id_secondary_group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_primary_groupChanging(int value);
    partial void Onid_primary_groupChanged();
    partial void Onid_secondary_groupChanging(int value);
    partial void Onid_secondary_groupChanged();
    #endregion
		
		public DeviceGroupDependency()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_primary_group", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_primary_group
		{
			get
			{
				return this._id_primary_group;
			}
			set
			{
				if ((this._id_primary_group != value))
				{
					this.Onid_primary_groupChanging(value);
					this.SendPropertyChanging();
					this._id_primary_group = value;
					this.SendPropertyChanged("id_primary_group");
					this.Onid_primary_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_secondary_group", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_secondary_group
		{
			get
			{
				return this._id_secondary_group;
			}
			set
			{
				if ((this._id_secondary_group != value))
				{
					this.Onid_secondary_groupChanging(value);
					this.SendPropertyChanging();
					this._id_secondary_group = value;
					this.SendPropertyChanged("id_secondary_group");
					this.Onid_secondary_groupChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceParams")]
	public partial class DeviceParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_device;
		
		private int _id_type;
		
		private string _value;
		
		private EntityRef<TypeParam> _TypeParam;
		
		private EntityRef<ClientDevice> _ClientDevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_deviceChanging(int value);
    partial void Onid_deviceChanged();
    partial void Onid_typeChanging(int value);
    partial void Onid_typeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public DeviceParam()
		{
			this._TypeParam = default(EntityRef<TypeParam>);
			this._ClientDevice = default(EntityRef<ClientDevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_device", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_device
		{
			get
			{
				return this._id_device;
			}
			set
			{
				if ((this._id_device != value))
				{
					if (this._ClientDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_deviceChanging(value);
					this.SendPropertyChanging();
					this._id_device = value;
					this.SendPropertyChanged("id_device");
					this.Onid_deviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_type", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id_type
		{
			get
			{
				return this._id_type;
			}
			set
			{
				if ((this._id_type != value))
				{
					if (this._TypeParam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_typeChanging(value);
					this.SendPropertyChanging();
					this._id_type = value;
					this.SendPropertyChanged("id_type");
					this.Onid_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeParam_DeviceParam", Storage="_TypeParam", ThisKey="id_type", OtherKey="id_type", IsForeignKey=true)]
		public TypeParam TypeParam
		{
			get
			{
				return this._TypeParam.Entity;
			}
			set
			{
				TypeParam previousValue = this._TypeParam.Entity;
				if (((previousValue != value) 
							|| (this._TypeParam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeParam.Entity = null;
						previousValue.DeviceParams.Remove(this);
					}
					this._TypeParam.Entity = value;
					if ((value != null))
					{
						value.DeviceParams.Add(this);
						this._id_type = value.id_type;
					}
					else
					{
						this._id_type = default(int);
					}
					this.SendPropertyChanged("TypeParam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDevice_DeviceParam", Storage="_ClientDevice", ThisKey="id_device", OtherKey="id", IsForeignKey=true)]
		public ClientDevice ClientDevice
		{
			get
			{
				return this._ClientDevice.Entity;
			}
			set
			{
				ClientDevice previousValue = this._ClientDevice.Entity;
				if (((previousValue != value) 
							|| (this._ClientDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientDevice.Entity = null;
						previousValue.DeviceParams.Remove(this);
					}
					this._ClientDevice.Entity = value;
					if ((value != null))
					{
						value.DeviceParams.Add(this);
						this._id_device = value.id;
					}
					else
					{
						this._id_device = default(int);
					}
					this.SendPropertyChanged("ClientDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeviceEvent")]
	public partial class DeviceEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_device;
		
		private string _data;
		
		private EntityRef<ClientDevice> _ClientDevice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_deviceChanging(int value);
    partial void Onid_deviceChanged();
    partial void OndataChanging(string value);
    partial void OndataChanged();
    #endregion
		
		public DeviceEvent()
		{
			this._ClientDevice = default(EntityRef<ClientDevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_device", DbType="Int NOT NULL")]
		public int id_device
		{
			get
			{
				return this._id_device;
			}
			set
			{
				if ((this._id_device != value))
				{
					if (this._ClientDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_deviceChanging(value);
					this.SendPropertyChanging();
					this._id_device = value;
					this.SendPropertyChanged("id_device");
					this.Onid_deviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="NVarChar(MAX)")]
		public string data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDevice_DeviceEvent", Storage="_ClientDevice", ThisKey="id_device", OtherKey="id", IsForeignKey=true)]
		public ClientDevice ClientDevice
		{
			get
			{
				return this._ClientDevice.Entity;
			}
			set
			{
				ClientDevice previousValue = this._ClientDevice.Entity;
				if (((previousValue != value) 
							|| (this._ClientDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientDevice.Entity = null;
						previousValue.DeviceEvents.Remove(this);
					}
					this._ClientDevice.Entity = value;
					if ((value != null))
					{
						value.DeviceEvents.Add(this);
						this._id_device = value.id;
					}
					else
					{
						this._id_device = default(int);
					}
					this.SendPropertyChanged("ClientDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientDevices")]
	public partial class ClientDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _id_server;
		
		private int _fo_id_device;
		
		private int _type_device;
		
		private System.Nullable<int> _id_group;
		
		private string _name;
		
		private string _data;
		
		private string _settings;
		
		private System.Nullable<int> _status;
		
		private System.Nullable<int> _state;
		
		private System.Nullable<System.DateTime> _dateOfChange;
		
		private EntitySet<DeviceParam> _DeviceParams;
		
		private EntitySet<DeviceEvent> _DeviceEvents;
		
		private EntityRef<ClientServer> _ClientServer;
		
		private EntityRef<ClientDeviceGroup> _ClientDeviceGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_serverChanging(int value);
    partial void Onid_serverChanged();
    partial void Onfo_id_deviceChanging(int value);
    partial void Onfo_id_deviceChanged();
    partial void Ontype_deviceChanging(int value);
    partial void Ontype_deviceChanged();
    partial void Onid_groupChanging(System.Nullable<int> value);
    partial void Onid_groupChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndataChanging(string value);
    partial void OndataChanged();
    partial void OnsettingsChanging(string value);
    partial void OnsettingsChanged();
    partial void OnstatusChanging(System.Nullable<int> value);
    partial void OnstatusChanged();
    partial void OnstateChanging(System.Nullable<int> value);
    partial void OnstateChanged();
    partial void OndateOfChangeChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfChangeChanged();
    #endregion
		
		public ClientDevice()
		{
			this._DeviceParams = new EntitySet<DeviceParam>(new Action<DeviceParam>(this.attach_DeviceParams), new Action<DeviceParam>(this.detach_DeviceParams));
			this._DeviceEvents = new EntitySet<DeviceEvent>(new Action<DeviceEvent>(this.attach_DeviceEvents), new Action<DeviceEvent>(this.detach_DeviceEvents));
			this._ClientServer = default(EntityRef<ClientServer>);
			this._ClientDeviceGroup = default(EntityRef<ClientDeviceGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_server", DbType="Int NOT NULL")]
		public int id_server
		{
			get
			{
				return this._id_server;
			}
			set
			{
				if ((this._id_server != value))
				{
					if (this._ClientServer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_serverChanging(value);
					this.SendPropertyChanging();
					this._id_server = value;
					this.SendPropertyChanged("id_server");
					this.Onid_serverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fo_id_device", DbType="Int NOT NULL")]
		public int fo_id_device
		{
			get
			{
				return this._fo_id_device;
			}
			set
			{
				if ((this._fo_id_device != value))
				{
					this.Onfo_id_deviceChanging(value);
					this.SendPropertyChanging();
					this._fo_id_device = value;
					this.SendPropertyChanged("fo_id_device");
					this.Onfo_id_deviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_device", DbType="Int NOT NULL")]
		public int type_device
		{
			get
			{
				return this._type_device;
			}
			set
			{
				if ((this._type_device != value))
				{
					this.Ontype_deviceChanging(value);
					this.SendPropertyChanging();
					this._type_device = value;
					this.SendPropertyChanged("type_device");
					this.Ontype_deviceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_group", DbType="Int")]
		public System.Nullable<int> id_group
		{
			get
			{
				return this._id_group;
			}
			set
			{
				if ((this._id_group != value))
				{
					if (this._ClientDeviceGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_groupChanging(value);
					this.SendPropertyChanging();
					this._id_group = value;
					this.SendPropertyChanged("id_group");
					this.Onid_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="NVarChar(MAX)")]
		public string data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_settings", DbType="NVarChar(MAX)")]
		public string settings
		{
			get
			{
				return this._settings;
			}
			set
			{
				if ((this._settings != value))
				{
					this.OnsettingsChanging(value);
					this.SendPropertyChanging();
					this._settings = value;
					this.SendPropertyChanged("settings");
					this.OnsettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Int")]
		public System.Nullable<int> status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="Int")]
		public System.Nullable<int> state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfChange", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateOfChange
		{
			get
			{
				return this._dateOfChange;
			}
			set
			{
				if ((this._dateOfChange != value))
				{
					this.OndateOfChangeChanging(value);
					this.SendPropertyChanging();
					this._dateOfChange = value;
					this.SendPropertyChanged("dateOfChange");
					this.OndateOfChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDevice_DeviceParam", Storage="_DeviceParams", ThisKey="id", OtherKey="id_device")]
		public EntitySet<DeviceParam> DeviceParams
		{
			get
			{
				return this._DeviceParams;
			}
			set
			{
				this._DeviceParams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDevice_DeviceEvent", Storage="_DeviceEvents", ThisKey="id", OtherKey="id_device")]
		public EntitySet<DeviceEvent> DeviceEvents
		{
			get
			{
				return this._DeviceEvents;
			}
			set
			{
				this._DeviceEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientServer_ClientDevice", Storage="_ClientServer", ThisKey="id_server", OtherKey="id", IsForeignKey=true)]
		public ClientServer ClientServer
		{
			get
			{
				return this._ClientServer.Entity;
			}
			set
			{
				ClientServer previousValue = this._ClientServer.Entity;
				if (((previousValue != value) 
							|| (this._ClientServer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientServer.Entity = null;
						previousValue.ClientDevices.Remove(this);
					}
					this._ClientServer.Entity = value;
					if ((value != null))
					{
						value.ClientDevices.Add(this);
						this._id_server = value.id;
					}
					else
					{
						this._id_server = default(int);
					}
					this.SendPropertyChanged("ClientServer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDeviceGroup_ClientDevice", Storage="_ClientDeviceGroup", ThisKey="id_group", OtherKey="id", IsForeignKey=true)]
		public ClientDeviceGroup ClientDeviceGroup
		{
			get
			{
				return this._ClientDeviceGroup.Entity;
			}
			set
			{
				ClientDeviceGroup previousValue = this._ClientDeviceGroup.Entity;
				if (((previousValue != value) 
							|| (this._ClientDeviceGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientDeviceGroup.Entity = null;
						previousValue.ClientDevices.Remove(this);
					}
					this._ClientDeviceGroup.Entity = value;
					if ((value != null))
					{
						value.ClientDevices.Add(this);
						this._id_group = value.id;
					}
					else
					{
						this._id_group = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientDeviceGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceParams(DeviceParam entity)
		{
			this.SendPropertyChanging();
			entity.ClientDevice = this;
		}
		
		private void detach_DeviceParams(DeviceParam entity)
		{
			this.SendPropertyChanging();
			entity.ClientDevice = null;
		}
		
		private void attach_DeviceEvents(DeviceEvent entity)
		{
			this.SendPropertyChanging();
			entity.ClientDevice = this;
		}
		
		private void detach_DeviceEvents(DeviceEvent entity)
		{
			this.SendPropertyChanging();
			entity.ClientDevice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClientDeviceGroup")]
	public partial class ClientDeviceGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _id_server;
		
		private System.Nullable<int> _fo_id_group;
		
		private string _name;
		
		private int _state;
		
		private System.Nullable<System.DateTime> _dateOfChange;
		
		private EntitySet<DeviceGroupParam> _DeviceGroupParams;
		
		private EntitySet<ClientDevice> _ClientDevices;
		
		private EntityRef<ClientServer> _ClientServer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onid_serverChanging(System.Nullable<int> value);
    partial void Onid_serverChanged();
    partial void Onfo_id_groupChanging(System.Nullable<int> value);
    partial void Onfo_id_groupChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnstateChanging(int value);
    partial void OnstateChanged();
    partial void OndateOfChangeChanging(System.Nullable<System.DateTime> value);
    partial void OndateOfChangeChanged();
    #endregion
		
		public ClientDeviceGroup()
		{
			this._DeviceGroupParams = new EntitySet<DeviceGroupParam>(new Action<DeviceGroupParam>(this.attach_DeviceGroupParams), new Action<DeviceGroupParam>(this.detach_DeviceGroupParams));
			this._ClientDevices = new EntitySet<ClientDevice>(new Action<ClientDevice>(this.attach_ClientDevices), new Action<ClientDevice>(this.detach_ClientDevices));
			this._ClientServer = default(EntityRef<ClientServer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_server", DbType="Int")]
		public System.Nullable<int> id_server
		{
			get
			{
				return this._id_server;
			}
			set
			{
				if ((this._id_server != value))
				{
					if (this._ClientServer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_serverChanging(value);
					this.SendPropertyChanging();
					this._id_server = value;
					this.SendPropertyChanged("id_server");
					this.Onid_serverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fo_id_group", DbType="Int")]
		public System.Nullable<int> fo_id_group
		{
			get
			{
				return this._fo_id_group;
			}
			set
			{
				if ((this._fo_id_group != value))
				{
					this.Onfo_id_groupChanging(value);
					this.SendPropertyChanging();
					this._fo_id_group = value;
					this.SendPropertyChanged("fo_id_group");
					this.Onfo_id_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="Int NOT NULL")]
		public int state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfChange", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateOfChange
		{
			get
			{
				return this._dateOfChange;
			}
			set
			{
				if ((this._dateOfChange != value))
				{
					this.OndateOfChangeChanging(value);
					this.SendPropertyChanging();
					this._dateOfChange = value;
					this.SendPropertyChanged("dateOfChange");
					this.OndateOfChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDeviceGroup_DeviceGroupParam", Storage="_DeviceGroupParams", ThisKey="id", OtherKey="id_group")]
		public EntitySet<DeviceGroupParam> DeviceGroupParams
		{
			get
			{
				return this._DeviceGroupParams;
			}
			set
			{
				this._DeviceGroupParams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientDeviceGroup_ClientDevice", Storage="_ClientDevices", ThisKey="id", OtherKey="id_group")]
		public EntitySet<ClientDevice> ClientDevices
		{
			get
			{
				return this._ClientDevices;
			}
			set
			{
				this._ClientDevices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClientServer_ClientDeviceGroup", Storage="_ClientServer", ThisKey="id_server", OtherKey="id", IsForeignKey=true)]
		public ClientServer ClientServer
		{
			get
			{
				return this._ClientServer.Entity;
			}
			set
			{
				ClientServer previousValue = this._ClientServer.Entity;
				if (((previousValue != value) 
							|| (this._ClientServer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientServer.Entity = null;
						previousValue.ClientDeviceGroups.Remove(this);
					}
					this._ClientServer.Entity = value;
					if ((value != null))
					{
						value.ClientDeviceGroups.Add(this);
						this._id_server = value.id;
					}
					else
					{
						this._id_server = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClientServer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeviceGroupParams(DeviceGroupParam entity)
		{
			this.SendPropertyChanging();
			entity.ClientDeviceGroup = this;
		}
		
		private void detach_DeviceGroupParams(DeviceGroupParam entity)
		{
			this.SendPropertyChanging();
			entity.ClientDeviceGroup = null;
		}
		
		private void attach_ClientDevices(ClientDevice entity)
		{
			this.SendPropertyChanging();
			entity.ClientDeviceGroup = this;
		}
		
		private void detach_ClientDevices(ClientDevice entity)
		{
			this.SendPropertyChanging();
			entity.ClientDeviceGroup = null;
		}
	}
}
#pragma warning restore 1591
